theory RedSafeUnpack
    imports AltFlatLemma ReduceAction
begin
  
definition upc_init_abbrev where
  "upc_init_abbrev v1 v2 = AppExp (ConstExp UnpackConst) (PairExp v1 v2)"  

definition pair_abbrev where
  "pair_abbrev v1 v2 = PairExp v1 v2"  
  
definition upc_res_abbrev where
  "upc_res_abbrev f v1 v2 = LamExp f (AppExp (AppExp (VarExp (VarType f)) v1) v2)"
  
lemma wt_sexp_drop_dep_all: "\<lbrakk> well_typed env delta r_s e tau r_s r_s; well_formed_delta env delta; is_sexp e; safe_type_x tau r \<rbrakk> \<Longrightarrow>
  well_typed env delta (drop_use_env_dep r_s r) e tau (drop_use_env_dep r_s r) (drop_use_env_dep r_s r)"  
  apply (case_tac r)
    apply (auto)
   apply (rule_tac wt_sexp_no_all)
     apply (auto)
  apply (rule_tac wt_sexp_drop_all)
    apply (auto)
  apply (simp add: unlim_def)
  done  
  
lemma leq_safe_type: "\<lbrakk> aff_leq (req_type tau) r \<rbrakk> \<Longrightarrow> safe_type_x tau r"    
  apply (case_tac r)
    apply (auto)
   apply (case_tac "req_type tau")
     apply (auto)
  apply (simp add: unlim_def)
  apply (case_tac "req_type tau")
    apply (auto)
  done
    
lemma lift_drop_leq_use_env: "\<lbrakk> leq_use_env (lift_use_env r_x r) r_s \<rbrakk> \<Longrightarrow> leq_use_env (lift_use_env (drop_use_env_dep r_x r) r) r_s"    
  apply (rule_tac r_sb="lift_use_env r_x r" in trans_leq_use_env)
   apply (simp)
  apply (rule_tac dist_lift_leq_use_env)
  apply (rule_tac self_drop_dep_leq_use_env)
  done
  
lemma aff_lift_use_env: "\<lbrakk> aff_use_env r_s (as_aff r) \<rbrakk> \<Longrightarrow> aff_use_env (lift_use_env r_s r) (as_aff r)"    
  apply (case_tac "r")
    apply (auto)
  apply (simp add: aff_use_env_def)
  done
  
lemma aff_drop_dep_use_env: "aff_use_env (drop_use_env_dep r_s r) (as_aff r)"    
  apply (case_tac "r")
    apply (auto)
    apply (simp add: aff_use_env_def)
    apply (simp add: null_use_env_def)
    apply (simp add: empty_use_env_def)
   apply (simp add: aff_use_env_def)
   apply (simp add: weak_use_env_def)
   apply (simp add: drop_use_env_def)
  apply (simp add: aff_use_env_def)
  done    
    
lemma unpack_pair_type: "\<lbrakk> well_typed env delta r_s1 (upc_init_abbrev v1 v2) t2 r_s2 rx; is_value v1; is_value v2; well_formed_delta env delta;
  t2 = FunTy (FunTy t1a (FunTy t2a tx r (as_aff r')) r (as_aff r')) tx r' (as_aff r); f \<notin> free_vars v1; f \<notin> free_vars v2 \<rbrakk> \<Longrightarrow>
  (\<exists> rx1 rx2 r_ex.
    well_typed env delta rx1 v1 t1a rx1 rx1 \<and> well_typed env delta rx2 v2 t2a rx2 rx2 \<and> rx1 (Var f) = NoPerm \<and> rx2 (Var f) = NoPerm \<and>
    leq_use_env r_s2 (diff_use_env r_s1 r_ex) \<and> leq_use_env r_ex r_s1 \<and>
    leq_use_env (diff_use_env (comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)) r_ex) rx \<and>
    leq_use_env (comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)) r_s1 \<and> disj_use_env (lift_use_env rx1 r) (lift_use_env rx2 r) \<and>
    aff_use_env (lift_use_env rx1 r) (as_aff r) \<and> aff_use_env (lift_use_env rx2 r) (as_aff r)
  )"
  apply (simp add: upc_init_abbrev_def)
  apply (auto)
    (* well-typedness of e1 *)
  apply (rule_tac x="rem_use_env (drop_use_env_dep (comp_use_env rx1a (infl_use_env r_s2a r_s2aa)) r) (Var f)" in exI)
  apply (auto)
   apply (rule_tac well_typed_rem_perms)
    apply (rule_tac wt_sexp_drop_dep_all)
       apply (rule_tac infl_sexp_wp)
         apply (simp_all)
      apply (rule_tac value_is_sexp)
      apply (simp)
     apply (rule_tac value_is_sexp)
     apply (simp)
    apply (rule_tac leq_safe_type)
    apply (case_tac "req_type t1a")
      apply (auto)
    apply (case_tac r)
      apply (auto)
    apply (case_tac "req_type t2a")
      apply (auto)
   apply (simp add: non_prim_vars_def)
   apply (cut_tac x="f" and e="v1" in free_res_vars)
    apply (auto)
    (* well-typedness of e2 *)
  apply (rule_tac x="rem_use_env (drop_use_env_dep (comp_use_env rx2a (infl_use_env r_s2aa r_s3a)) r) (Var f)" in exI)
  apply (auto)
     apply (rule_tac well_typed_rem_perms)
      apply (rule_tac wt_sexp_drop_dep_all)
         apply (rule_tac infl_sexp_wp)
           apply (simp_all)
        apply (rule_tac value_is_sexp)
        apply (simp)
       apply (rule_tac value_is_sexp)
       apply (simp)
      apply (rule_tac leq_safe_type)
      apply (case_tac "req_type t2a")
        apply (auto)
       apply (case_tac r)
         apply (auto)
        apply (case_tac "req_type t1a")
          apply (auto)
       apply (case_tac "req_type t1a")
         apply (auto)
      apply (case_tac r)
        apply (auto)
      apply (case_tac "req_type t1a")
        apply (auto)
     apply (simp add: non_prim_vars_def)
     apply (cut_tac x="f" and e="v2" in free_res_vars)
      apply (auto)
    (* none bounds *)
    apply (simp add: rem_use_env_def)
   apply (simp add: rem_use_env_def)
    (* existential bounds *)
  apply (cut_tac r_sc="r_s3a" and r_sb="r_s2aa" and r_sa="r_s1" in trans_leq_use_env)
    apply (rule_tac r_sb="r_s2a" in trans_leq_use_env)
     apply (simp_all)
    apply (rule_tac well_typed_perm_leq)
    apply (auto)
   apply (rule_tac well_typed_perm_leq)
   apply (auto)
  apply (rule_tac x="comp_use_env (comp_use_env (comp_use_env (infl_use_env r_s2a r_s2aa) (infl_use_env r_s2aa r_s3a)) r_exa)
    (comp_use_env (comp_use_env rx1 (lift_use_env rx2 r)) r_ex)" in exI)
  apply (auto)
        apply (rule_tac r_sb="diff_use_env r_s3 (comp_use_env (comp_use_env rx1 (lift_use_env rx2 r)) r_ex)" in trans_leq_use_env)
         apply (rule_tac rhs_unroll_dcl_use_env)
         apply (rule_tac dist_diff_leq_use_env)
         apply (rule_tac r_sb="diff_use_env r_s3a r_exa" in trans_leq_use_env)
          apply (rule_tac rhs_unroll_dcl_use_env)
          apply (rule_tac dist_diff_leq_use_env)
          apply (simp_all)
        apply (rule_tac disj_diff_leq_use_env)
         apply (rule_tac comm_disj_use_env)
         apply (rule_tac disj_comp_use_env2)
          apply (rule_tac infl_disj_use_env)
          apply (rule_tac well_typed_perm_leq)
          apply (auto)
        apply (rule_tac infl_disj_use_env)
        apply (rule_tac id_leq_use_env)
       apply (rule_tac dist_comp_leq_use_env)
        apply (rule_tac r_sb="r_s2a" in trans_leq_use_env)
         apply (simp)
        apply (rule_tac dist_comp_leq_use_env)
         apply (rule_tac dist_comp_leq_use_env)
          apply (rule_tac lhs_infl_leq_use_env)
          apply (rule_tac id_leq_use_env)
         apply (rule_tac lhs_infl_leq_use_env)
         apply (rule_tac well_typed_perm_leq)
         apply (auto)
       apply (rule_tac dist_comp_leq_use_env)
        apply (rule_tac r_sb="r_s3" in trans_leq_use_env)
         apply (rule_tac r_sb="diff_use_env r_s3a r_exa" in trans_leq_use_env)
          apply (rule_tac diff_leq_use_env)
          apply (simp_all)
    (* - primitive case *)
      apply (case_tac "r = NoPerm")
       apply (simp)
       apply (rule_tac diff_leq_use_env)
       apply (rule_tac dist_comp_leq_use_env)
        apply (rule_tac rem_leq_use_env)
        apply (rule_tac leq_empty_use_env)
       apply (rule_tac rem_leq_use_env)
       apply (rule_tac leq_empty_use_env)
    (* - non-primitive case *)
      apply (simp add: pair_req_def)
      apply (simp add: app_req_def)
      apply (case_tac "as_aff r = Prim")
       apply (case_tac r)
         apply (auto)
      apply (rule_tac r_sb="diff_use_env (comp_use_env rx1 rx2) (comp_use_env (comp_use_env rx1 (lift_use_env rx2 r)) r_ex)" in trans_leq_use_env)
       apply (simp)
      apply (rule_tac lhs_unroll_dcl_use_env)
      apply (rule_tac dist_diff_leq_use_env)
      apply (rule_tac r_sb="diff_use_env (comp_use_env (lift_use_env rx1a r) (lift_use_env rx2a r)) r_exa" in trans_leq_use_env)
       apply (rule_tac comp_leq_use_env2)
       apply (simp)
      apply (rule_tac lhs_unroll_dcl_use_env)
      apply (rule_tac dist_diff_leq_use_env)
      apply (rule_tac lhs_dist_dcl_use_env)
      apply (rule_tac dist_comp_leq_use_env)
       apply (simp add: lift_diff_use_env)
       apply (rule_tac comp_leq_use_env1)
       apply (rule_tac dist_lift_leq_use_env)
       apply (rule_tac r_sb="diff_use_env (comp_use_env rx1a (infl_use_env r_s2a r_s2aa)) (infl_use_env r_s2a r_s2aa)" in trans_leq_use_env)
        apply (rule_tac lhs_dist_dcl_use_env)
        apply (rule_tac dist_comp_leq_use_env)
         apply (rule_tac self_diff_leq_use_env)
        apply (rule_tac diff_infl_leq_use_env)
       apply (rule_tac dist_diff_leq_use_env_gen)
        apply (rule_tac rem_leq_use_env)
        apply (rule_tac self_drop_dep_leq_use_env)
       apply (rule_tac self_comp_leq_use_env1)
      apply (simp add: lift_diff_use_env)
      apply (rule_tac comp_leq_use_env2)
      apply (rule_tac dist_lift_leq_use_env)
      apply (rule_tac r_sb="diff_use_env (comp_use_env rx2a (infl_use_env r_s2aa r_s3a)) (infl_use_env r_s2aa r_s3a)" in trans_leq_use_env)
       apply (rule_tac lhs_dist_dcl_use_env)
       apply (rule_tac dist_comp_leq_use_env)
        apply (rule_tac self_diff_leq_use_env)
       apply (rule_tac diff_infl_leq_use_env)
      apply (rule_tac dist_diff_leq_use_env_gen)
       apply (rule_tac rem_leq_use_env)
       apply (rule_tac self_drop_dep_leq_use_env)
      apply (rule_tac self_comp_leq_use_env2)
    (* main bound *)
     apply (rule_tac dist_comp_leq_use_env)
      apply (simp add: lift_rem_use_env)
      apply (rule_tac rem_leq_use_env)
      apply (rule_tac lift_drop_leq_use_env)
      apply (simp add: lift_comp_use_env)
      apply (simp add: infl_lift_use_env)
      apply (rule_tac r_sb="r_s2a" in trans_leq_use_env)
       apply (simp)
      apply (rule_tac dist_comp_leq_use_env)
       apply (rule_tac r_sb="r_s2aa" in trans_leq_use_env)
        apply (rule_tac well_typed_perm_leq)
        apply (auto)
       apply (rule_tac r_sb="r_s3a" in trans_leq_use_env)
        apply (rule_tac well_typed_perm_leq)
        apply (auto)
      apply (rule_tac self_infl_leq_use_env)
     apply (simp add: lift_rem_use_env)
     apply (rule_tac rem_leq_use_env)
     apply (rule_tac lift_drop_leq_use_env)
     apply (simp add: lift_comp_use_env)
     apply (simp add: infl_lift_use_env)
     apply (rule_tac r_sb="r_s2aa" in trans_leq_use_env)
      apply (rule_tac r_sb="r_s2a" in trans_leq_use_env)
       apply (simp)
      apply (rule_tac well_typed_perm_leq)
      apply (auto)
     apply (rule_tac dist_comp_leq_use_env)
      apply (rule_tac r_sb="r_s3a" in trans_leq_use_env)
       apply (rule_tac well_typed_perm_leq)
       apply (auto)
     apply (rule_tac self_infl_leq_use_env)
    (* disjointness *)
    apply (simp add: lift_rem_use_env)
    apply (rule_tac r_s="lift_use_env (comp_use_env rx1a (infl_use_env r_s2a r_s2aa)) r" in disj_leq_use_env1)
     apply (rule_tac r_s="lift_use_env (comp_use_env rx2a (infl_use_env r_s2aa r_s3a)) r" in disj_leq_use_env2)
      apply (simp add: lift_comp_use_env)
      apply (simp add: infl_lift_use_env)
      apply (rule_tac disj_comp_use_env1)
       apply (rule_tac disj_comp_use_env2)
        apply (simp)
       apply (rule_tac infl_disj_use_env)
       apply (simp)
      apply (rule_tac disj_comp_use_env2)
       apply (rule_tac comm_disj_use_env)
       apply (rule_tac infl_disj_use_env)
       apply (rule_tac r_sb="r_s3a" in trans_leq_use_env)
        apply (rule_tac well_typed_perm_leq)
        apply (auto)
      apply (rule_tac comm_disj_use_env)
      apply (rule_tac infl_disj_use_env)
      apply (rule_tac self_infl_leq_use_env)
     apply (rule_tac rem_leq_use_env)
     apply (rule_tac lift_drop_leq_use_env)
     apply (rule_tac id_leq_use_env)
    apply (rule_tac rem_leq_use_env)
    apply (rule_tac lift_drop_leq_use_env)
    apply (rule_tac id_leq_use_env)
    (* affinity reqs *)
   apply (rule_tac aff_lift_use_env)
   apply (rule_tac aff_rem_use_env)
   apply (rule_tac aff_drop_dep_use_env)
  apply (rule_tac aff_lift_use_env)
  apply (rule_tac aff_rem_use_env)
  apply (rule_tac aff_drop_dep_use_env)
  done

    
    
lemma aff_leq_perm: "\<lbrakk> aff_use_env r_s (as_aff r) \<rbrakk> \<Longrightarrow> leq_perm (r_s x) r"    
  apply (case_tac r)
    apply (auto)
   apply (simp add: aff_use_env_def)
   apply (simp add: null_use_env_def)
  apply (simp add: aff_use_env_def)
  apply (simp add: weak_use_env_def)
  apply (case_tac "r_s x")
    apply (auto)
  done
    
lemma comp_use_no_own: "\<lbrakk> r_sa x \<noteq> OwnPerm; r_sb x \<noteq> OwnPerm \<rbrakk> \<Longrightarrow> comp_use_env r_sa r_sb x \<noteq> OwnPerm"    
  apply (simp add: comp_use_env_def)
  apply (case_tac "r_sa x")
    apply (auto)
   apply (case_tac "r_sb x")
     apply (auto)
  apply (case_tac "r_sb x")
    apply (auto)
  done
    
lemma sares_unpack_case: "\<lbrakk>well_typed_state s1 env delta; sub_use_env s1 r_f;
        t2 = FunTy (FunTy t1a (FunTy t2a tx r (as_aff r')) r (as_aff r')) tx r' (as_aff r); is_value v1; is_value v2;
        f \<notin> free_vars v1; f \<notin> free_vars v2; leq_perm r r';
        well_typed env delta r_s1 (upc_init_abbrev v1 v2) t2 r_s3 rx \<rbrakk>
       \<Longrightarrow> \<exists>g_ax. (\<exists>rxa. (\<exists>r_end r_s' t1 ra a r_s2 rx1.
                             (\<exists>t1b rb. (\<exists>aa. add_env (red_env env g_ax) (Var f) (FunTy t1a (FunTy t2a tx r (as_aff r')) r (as_aff r')) (Var f) =
                                             Some (FunTy t1b (FunTy t1 tx ra a) rb aa)) \<and>
                                       (\<exists>r_s2a rx1a.
                                           (\<exists>r_ex tau_x.
                                               add_env (red_env env g_ax) (Var f) (FunTy t1a (FunTy t2a tx r (as_aff r')) r (as_aff r')) (Var f) = Some tau_x \<and>
                                               leq_use_env (ereq_use_env (Var f) tau_x) (add_use_env rxa (Var f) r') \<and>
                                               leq_use_env r_s2a (diff_use_env (add_use_env rxa (Var f) r') (comp_use_env (ereq_use_env (Var f) tau_x) r_ex)) \<and>
                                               leq_use_env rx1a r_s2a \<and>
                                               leq_use_env r_ex (add_use_env rxa (Var f) r') \<and>
                                               leq_use_env (diff_use_env (ereq_use_env (Var f) tau_x) (comp_use_env (ereq_use_env (Var f) tau_x) r_ex)) rx1a) \<and>
                                           (\<exists>rx2 r_s3. well_typed (add_env (red_env env g_ax) (Var f) (FunTy t1a (FunTy t2a tx r (as_aff r')) r (as_aff r'))) (red_delta delta g_ax)
                                                        r_s2a v1 t1b r_s3 rx2 \<and>
                                                       (\<exists>r_ex. leq_use_env r_s2
                                                                (diff_use_env r_s3 (comp_use_env (comp_use_env rx1a (lift_use_env rx2 rb)) r_ex)) \<and>
                                                               leq_use_env (comp_use_env rx1a (lift_use_env rx2 rb)) r_s3 \<and>
                                                               disj_use_env rx1a (lift_use_env rx2 rb) \<and>
                                                               leq_use_env rx1 r_s2 \<and>
                                                               leq_use_env r_ex (add_use_env rxa (Var f) r') \<and>
                                                               leq_use_env (app_req rx1a rx2 rb (FunTy t1 tx ra a) r_ex) rx1)))) \<and>
                             (\<exists>rx2 r_s3. well_typed (add_env (red_env env g_ax) (Var f) (FunTy t1a (FunTy t2a tx r (as_aff r')) r (as_aff r'))) (red_delta delta g_ax) r_s2 v2 t1 r_s3
                                          rx2 \<and>
                                         (\<exists>r_ex. leq_use_env r_s' (diff_use_env r_s3 (comp_use_env (comp_use_env rx1 (lift_use_env rx2 ra)) r_ex)) \<and>
                                                 leq_use_env (comp_use_env rx1 (lift_use_env rx2 ra)) r_s3 \<and>
                                                 disj_use_env rx1 (lift_use_env rx2 ra) \<and>
                                                 leq_use_env r_end r_s' \<and>
                                                 leq_use_env r_ex (add_use_env rxa (Var f) r') \<and> leq_use_env (app_req rx1 rx2 ra tx r_ex) r_end))) \<and>
                         aff_use_env rxa (as_aff r) \<and>
                         leq_use_env rxa (exp_red_use_env r_s1 g_ax) \<and>
                         (\<exists>r_ex. leq_use_env (end_red_use_env r_s3 g_ax) (diff_use_env (exp_red_use_env r_s1 g_ax) r_ex) \<and>
                                 leq_use_env (end_red_use_env rx g_ax) (end_red_use_env r_s3 g_ax) \<and>
                                 leq_use_env r_ex (exp_red_use_env r_s1 g_ax) \<and> leq_use_env (diff_use_env rxa r_ex) (end_red_use_env rx g_ax))) \<and>
                  well_typed_state s1 (red_env env g_ax) (red_delta delta g_ax) \<and>
                  sub_use_env s1 (exp_red_use_env r_f g_ax) \<and> safe_act s1 (infl_use_env r_f r_s3) g_ax \<and> corr_act NoAct g_ax"  
  apply (rule_tac x="NoResAct" in exI)
  apply (auto)
    (* prelim: prepare the type of the pairs *)
  apply (cut_tac env="env" and ?v1.0="v1" and ?v2.0="v2" in unpack_pair_type)
         apply (auto)
   apply (rule_tac wts_well_formed_delta)
   apply (auto)
    (* permissions given to f v1 v2 derived from the permissions of the pair *)
   apply (rule_tac x="comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)" in exI)
   apply (auto)
     apply (rule_tac x="diff_use_env (comp_use_env (comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)) (one_use_env (Var f) r'))
      (comp_use_env (one_use_env (Var f) r') (comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)))" in exI)
     apply (rule_tac x="diff_use_env (comp_use_env (comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)) (one_use_env (Var f) r'))
      (comp_use_env (one_use_env (Var f) r') (comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)))" in exI)
    (* typing f v1 *)
     apply (rule_tac x="t2a" in exI)
     apply (rule_tac x="r" in exI)
     apply (rule_tac x="as_aff r'" in exI)
     apply (rule_tac x="diff_use_env (comp_use_env (comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)) (one_use_env (Var f) r'))
      (comp_use_env (one_use_env (Var f) r') (lift_use_env rx1 r))" in exI)
     apply (rule_tac x="diff_use_env (comp_use_env (lift_use_env rx1 r) (one_use_env (Var f) r'))
      (comp_use_env (one_use_env (Var f) r') (lift_use_env rx1 r))" in exI)
     apply (auto)
    (* typing f *)
      apply (rule_tac x="t1a" in exI)
      apply (rule_tac x="r" in exI)
      apply (auto)
       apply (simp add: add_env_def)
      apply (rule_tac x="diff_use_env (comp_use_env (comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)) (one_use_env (Var f) r')) (one_use_env (Var f) r')" in exI)
      apply (rule_tac x="diff_use_env (one_use_env (Var f) r') (one_use_env (Var f) r')" in exI)
      apply (auto)
       apply (rule_tac x="one_use_env (Var f) r'" in exI)
       apply (rule_tac x="FunTy t1a (FunTy t2a tx r (as_aff r')) r (as_aff r')" in exI)
       apply (auto)
            apply (simp add: add_env_def)
           apply (rule_tac ereq_leq_use_envx)
           apply (simp add: add_use_env_def)
           apply (simp add: end_req_perm_def)
           apply (case_tac "r'")
             apply (auto)
          apply (rule_tac dist_diff_leq_use_env_gen)
           apply (cut_tac r_s="comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)" and x="Var f" and r="r'" in add_comp_use_env)
            apply (auto)
            apply (rule_tac q="r" in trans_leq_perm)
             apply (rule_tac r_s="comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)" and x="Var f" in aff_leq_perm)
             apply (rule_tac aff_comp_use_env)
              apply (auto)
           apply (rule_tac id_leq_use_env)
          apply (rule_tac dist_comp_leq_use_env)
           apply (rule_tac ereq_leq_use_envx)
           apply (simp add: one_use_env_def)
           apply (simp add: end_req_perm_def)
           apply (case_tac "r'")
             apply (auto)
          apply (rule_tac id_leq_use_env)
         apply (rule_tac dist_diff_leq_use_env)
         apply (rule_tac self_comp_leq_use_env2)
        apply (simp add: leq_use_env_def)
        apply (simp add: one_use_env_def)
        apply (simp add: add_use_env_def)
        apply (case_tac "r'")
          apply (auto)
       apply (rule_tac dist_diff_leq_use_env_gen)
        apply (rule_tac ereq_leq_use_envx)
        apply (simp add: one_use_env_def)
        apply (simp add: end_req_perm_def)
        apply (case_tac "r'")
          apply (auto)
       apply (rule_tac self_comp_leq_use_env2)
    (* typing v1 + resolving app *)
      apply (rule_tac x="rx1" in exI)
      apply (rule_tac x="diff_use_env (comp_use_env (comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)) (one_use_env (Var f) r')) (one_use_env (Var f) r')" in exI)
      apply (auto)
       apply (rule_tac rx="diff_use_env rx1 (one_use_env (Var f) r')" in well_typed_incr_req)
         apply (rule_tac well_typed_diff_perms)
          apply (rule_tac r_s="rx1" in well_typed_incr_simul_perm)
           apply (rule_tac comp_leq_use_env1)
           apply (rule_tac comp_leq_use_env1)
           apply (rule_tac self_lift_leq_use_env)
          apply (rule_tac well_typed_add_vars)
            apply (auto)
         apply (simp add: own_env_vars_def)
         apply (simp add: one_use_env_def)
         apply (simp add: non_prim_vars_def)
         apply (case_tac "x = Var f")
          apply (auto)
         apply (cut_tac x="f" and e="v1" in free_res_vars)
          apply (auto)
        apply (rule_tac self_diff_leq_use_env)
       apply (rule_tac disj_diff_leq_use_env)
        apply (simp add: disj_use_env_def)
        apply (simp add: mini_disj_use_env_def)
        apply (simp add: one_use_env_def)
       apply (rule_tac comp_leq_use_env1)
       apply (rule_tac comp_leq_use_env1)
       apply (rule_tac self_lift_leq_use_env)
    (* first app bounds *)
      apply (rule_tac x="empty_use_env" in exI)
      apply (auto)
           apply (rule_tac rhs_fold_dcl_use_env)
           apply (rule_tac dist_diff_leq_use_env_gen)
            apply (rule_tac id_leq_use_env)
           apply (rule_tac dist_comp_leq_use_env)
            apply (rule_tac self_comp_leq_use_env1)
           apply (rule_tac dist_comp_leq_use_env)
            apply (rule_tac dist_comp_leq_use_env)
             apply (rule_tac diff_leq_use_env)
             apply (rule_tac self_comp_leq_use_env1)
            apply (rule_tac self_comp_leq_use_env2)
           apply (rule_tac leq_empty_use_env)
          apply (rule_tac dist_comp_leq_use_env)
           apply (rule_tac dist_diff_leq_use_env)
           apply (rule_tac self_comp_leq_use_env2)
          apply (rule_tac disj_diff_leq_use_env)
           apply (simp add: disj_use_env_def)
           apply (simp add: mini_disj_use_env_def)
           apply (simp add: one_use_env_def)
           apply (case_tac r)
             apply (simp_all)
          apply (rule_tac comp_leq_use_env1)
          apply (rule_tac self_comp_leq_use_env1)
         apply (rule_tac r_s="one_use_env (Var f) r'" in disj_leq_use_env1)
          apply (simp add: disj_use_env_def)
          apply (simp add: mini_disj_use_env_def)
          apply (simp add: one_use_env_def)
          apply (case_tac r)
            apply (simp_all)
         apply (rule_tac self_diff_leq_use_env)
        apply (rule_tac dist_diff_leq_use_env)
        apply (rule_tac dist_comp_leq_use_env)
         apply (rule_tac comp_leq_use_env1)
         apply (rule_tac self_comp_leq_use_env1)
        apply (rule_tac self_comp_leq_use_env2)
       apply (rule_tac leq_empty_use_env)
      apply (simp add: app_req_def)
      apply (auto)
       apply (rule_tac leq_empty_use_env)
      apply (rule_tac rhs_unroll_dcl_use_env)
      apply (rule_tac dist_diff_leq_use_env_gen)
       apply (rule_tac dist_comp_leq_use_env)
        apply (rule_tac dist_diff_leq_use_env)
        apply (rule_tac self_comp_leq_use_env2)
       apply (rule_tac disj_diff_leq_use_env)
        apply (simp add: disj_use_env_def)
        apply (simp add: mini_disj_use_env_def)
        apply (simp add: one_use_env_def)
       apply (rule_tac comp_leq_use_env1)
       apply (rule_tac self_lift_leq_use_env)
      apply (rule_tac comp_leq_use_env1)
      apply (rule_tac self_comp_leq_use_env2)
    (* typing v2 *)
     apply (rule_tac x="rx2" in exI)
     apply (rule_tac x="diff_use_env (comp_use_env (comp_use_env (lift_use_env rx1 r) (lift_use_env rx2 r)) (one_use_env (Var f) r'))
      (comp_use_env (one_use_env (Var f) r') (lift_use_env rx1 r))" in exI)
     apply (auto)
      apply (rule_tac rx="diff_use_env rx2 (comp_use_env (one_use_env (Var f) r') (lift_use_env rx1 r))" in well_typed_incr_req)
        apply (rule_tac well_typed_diff_perms)
         apply (rule_tac well_typed_comp_perms_gen)
          apply (rule_tac well_typed_comp_perms2)
           apply (rule_tac well_typed_lift_perms)
           apply (rule_tac well_typed_add_vars)
             apply (auto)
          apply (rule_tac comm_disj_use_env)
          apply (simp)
         apply (simp add: mini_disj_use_env_def)
         apply (simp add: one_use_env_def)
         apply (simp add: comp_use_env_def)
         apply (case_tac r)
           apply (simp_all)
        apply (simp add: own_env_vars_def)
        apply (case_tac "Var f = x")
         apply (simp add: non_prim_vars_def)
         apply (auto)
         apply (cut_tac x="f" and e="v2" in free_res_vars)
          apply (auto)
        apply (case_tac "one_use_env (Var f) r' x = OwnPerm")
         apply (simp add: one_use_env_def)
        apply (case_tac "lift_use_env rx1 r x = OwnPerm")
         apply (case_tac "lift_use_env rx2 r x = NoPerm")
          apply (cut_tac x="x" and ?r_s1.0="rx2" and env="env" and e="v2" in well_typed_no_npv_use)
            apply (auto)
           apply (case_tac r)
             apply (auto)
           apply (case_tac "rx2 x")
             apply (auto)
          apply (simp add: non_prim_vars_def)
          apply (simp add: add_env_def)
          apply (simp add: non_prim_entry_def)
         apply (simp add: disj_use_env_def)
         apply (simp add: mini_disj_use_env_def)
        apply (cut_tac r_sa="one_use_env (Var f) r'" and r_sb="lift_use_env rx1 r" and x="x" in comp_use_no_own)
          apply (auto)
       apply (rule_tac self_diff_leq_use_env)
      apply (rule_tac disj_diff_leq_use_env)
       apply (rule_tac disj_comp_use_env1)
        apply (simp add: disj_use_env_def)
        apply (simp add: mini_disj_use_env_def)
        apply (simp add: one_use_env_def)
       apply (rule_tac r_s="lift_use_env rx2 r" in disj_leq_use_env2)
        apply (simp)
       apply (rule_tac self_lift_leq_use_env)
      apply (rule_tac comp_leq_use_env1)
      apply (rule_tac comp_leq_use_env2)
      apply (rule_tac self_lift_leq_use_env)
    (* (f v1) v2 bounds *)
     apply (rule_tac x="empty_use_env" in exI)
     apply (auto)
          apply (rule_tac rhs_fold_dcl_use_env)
          apply (rule_tac dist_diff_leq_use_env_gen)
           apply (rule_tac id_leq_use_env)
          apply (rule_tac dist_comp_leq_use_env)
           apply (rule_tac dist_comp_leq_use_env)
            apply (rule_tac self_comp_leq_use_env1)
           apply (rule_tac comp_leq_use_env2)
           apply (rule_tac self_comp_leq_use_env1)
          apply (rule_tac dist_comp_leq_use_env)
           apply (rule_tac dist_comp_leq_use_env)
            apply (rule_tac diff_leq_use_env)
            apply (rule_tac dist_comp_leq_use_env)
             apply (rule_tac comp_leq_use_env2)
             apply (rule_tac self_comp_leq_use_env1)
            apply (rule_tac self_comp_leq_use_env1)
           apply (rule_tac comp_leq_use_env2)
           apply (rule_tac self_comp_leq_use_env2)
          apply (rule_tac leq_empty_use_env)
         apply (rule_tac dist_comp_leq_use_env)
          apply (rule_tac dist_diff_leq_use_env)
          apply (rule_tac dist_comp_leq_use_env)
           apply (rule_tac comp_leq_use_env1)
           apply (rule_tac self_comp_leq_use_env1)
          apply (rule_tac self_comp_leq_use_env2)
         apply (rule_tac disj_diff_leq_use_env)
          apply (rule_tac disj_comp_use_env1)
           apply (simp add: disj_use_env_def)
           apply (simp add: mini_disj_use_env_def)
           apply (simp add: one_use_env_def)
           apply (case_tac r)
             apply (auto)
         apply (rule_tac comp_leq_use_env1)
         apply (rule_tac self_comp_leq_use_env2)
        apply (rule_tac r_s="comp_use_env (lift_use_env rx1 r) (one_use_env (Var f) r')" in disj_leq_use_env1)
         apply (rule_tac disj_comp_use_env1)
          apply (simp)
         apply (simp add: disj_use_env_def)
         apply (simp add: mini_disj_use_env_def)
         apply (simp add: one_use_env_def)
         apply (case_tac r)
           apply (simp_all)
        apply (rule_tac self_diff_leq_use_env)
       apply (rule_tac id_leq_use_env)
      apply (rule_tac leq_empty_use_env)
     apply (simp add: app_req_def)
     apply (auto)
      apply (rule_tac leq_empty_use_env)
     apply (rule_tac lhs_unroll_dcl_use_env)
     apply (rule_tac diff_leq_use_env)
     apply (rule_tac unroll_dcl_use_env)
     apply (rule_tac rhs_unroll_dcl_use_env)
     apply (rule_tac dist_diff_leq_use_env)
     apply (rule_tac rhs_fold_dcl_use_env)
     apply (rule_tac lhs_dist_dcl_use_env)
     apply (rule_tac dist_comp_leq_use_env)
      apply (rule_tac diff_leq_use_env)
      apply (rule_tac dist_diff_leq_use_env)
      apply (rule_tac dist_comp_leq_use_env)
       apply (rule_tac comp_leq_use_env1)
       apply (rule_tac self_comp_leq_use_env1)
      apply (rule_tac self_comp_leq_use_env2)
     apply (rule_tac disj_diff_leq_use_env)
      apply (rule_tac r_s="lift_use_env rx2 r" in disj_leq_use_env2)
       apply (rule_tac disj_comp_use_env1)
        apply (simp add: disj_use_env_def)
        apply (simp add: mini_disj_use_env_def)
        apply (simp add: one_use_env_def)
        apply (case_tac r)
          apply (simp_all)
      apply (rule_tac diff_leq_use_env)
      apply (rule_tac self_lift_leq_use_env)
     apply (rule_tac diff_leq_use_env)
     apply (rule_tac comp_leq_use_env1)
     apply (rule_tac comp_leq_use_env2)
     apply (rule_tac self_lift_leq_use_env)
    apply (rule_tac aff_comp_use_env)
     apply (simp_all)
    (* final existential *)
   apply (rule_tac x="r_ex" in exI)
   apply (auto)
   apply (rule_tac well_typed_perm_leqx)
   apply (auto)
  apply (simp add: corr_act_def)
  done
    

end